from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs

def template(title, body):
    return f'''
    <!doctype html>
    <html>
      <head>
        <title>{title}</title>
      </head>
      <body>
        <p><a href="/">back</a></p>
        <h1>{title}</h1>
        {body}
      </body>
    </html>
    '''

def index(path):
    body = '''
    <p>Here are the tasks for Lab 11.</p>

    <h2>Task 1: Hello, Name</h2>Fibonacci
    <p>Visiting the path /hello/[name] should show a page
    that says "Hello, [name]" (with the name properly capitalized).
    <p>Example: The page at <a href="/hello/bob">/hello/bob</a>
    should show "Hello, Bob".</p>

    <h2>Task 2: Fibonacci</h2>
    <p>The Fibonacci sequence can be generated by a recursive
    function on integers defined as follows:</p>
    <ul>
      <li><tt>fib(0) = 0</tt></li>
      <li><tt>fib(1) = 1</tt></li>
      <li><tt>fib(x) = fib(x-1) + fib(x-2)</tt> when <tt>x &gt; 1</tt></li>
    </ul>
    <p>Visiting the path /fib?x=[x] should show the result of
    evaluating <tt>fib(x)</tt>.</p>
    <p>Example: The page at <a href="/fib?x=10">/fib?x=10</a> should
    show "fib(10) = 55".</p>

    <h3>Fib Form</h3>
    <form action="/fib">
      <p><input name="x" type="number" value="10"></p>
      <p><button>Calculate</button></p> 
    </form>

    <h2>Task 3: Unit Conversions</h2>
    <p>The following form should convert between different temperature
    units. It operates by doing an HTTP POST.</p>

    <form action="/convert" method="post">
    <p>Temp: <input name="temp" value="32">
    <p>From:<select name="from">
      <option>F</option>
      <option>C</option>
      <option>K</option>
    </select>
    </p>
    <p>To:<select name="to">
      <option>F</option>
      <option>C</option>
      <option>K</option>
    </select>
    </p>
    <p><button>Convert</button></p>
    </form>

    <h2>Example: Doubling a Number</h2>
    <p>The following form doubles a number.</p>
    <form action="/double" method="post">
    <p><input name="num" type="number" value="5"></p>
    <p><button>Double</button></p>
    </form>
    '''
    return template("Lab 11: Tasks", body)


def show_path(path):
    body = f'''
    <p>The path is: {path}</p>
    '''
    return template("Show Path", body)


def say_hello(path):
    (_, _, name) = path.split("/")
    body = f'''
    <p>Hello, {name.capitalize()}</p>
    '''
    return template("Hello", body)


def fib(x):
    if x < 0:
        raise Exception("negative input out of range")
    if x == 0: return 0
    if x == 1:
        return 1
    else:
        return fib(x-1) + fib(x-2)


def show_fib(path):
    parts = path.split('=')
    print(parts)
    x = int(parts[1])
    y = fib(x)
    
    body = f'''
    <p>fib({x}) = {y}</p>
    '''
    return template("Fib", body)
    


def double(params):
    print(params)
    x = int(params['num'][0])
    y = 2 * x
    body = f'''
    double({x}) = {y}
    '''
    return template("Double", body)


def convert_temp(temp, fr, to):
    if fr == "F" and to == "C":
        return f2c(temp)
    #...
    return temp * 4


def convert(params):
    print(params)
    temp = params['temp'][0]
    fr = params['from'][0]
    to = params['to'][0]

    y = convert_temp(float(temp), fr, to)
    
    body = f'''
    <p>converted {temp} {fr} => {y} {to}</p>
    '''
    return template("Convert", body)


class Handler(BaseHTTPRequestHandler):
    def get_route(self):
        base = self.base_path()

        if '/' == base:
            return index

        if '/path' == base:
            return show_path

        if base.startswith("/hello"):
            return say_hello

        if base.startswith("/fib"):
            return show_fib

        return None

    
    def post_route(self):
        base = self.base_path()

        if '/double' == base:
            return double

        if '/convert' == base:
            return convert

        return None


    def base_path(self):
        return self.path.split("?")[0]


    def send_404(self):
        self.send_response(404)
        self.send_header("content-type", "text/plain; charset=UTF-8")
        self.end_headers()

        text = f'''404 Not Found: {self.path}'''
        self.wfile.write(text.encode('utf-8'))

    
    def do_HEAD(self):
        if self.get_route():
            self.send_response(200)
        else:
            self.send_404()

            
    def do_GET(self):
        page = self.get_route()
        
        if not page:
            self.send_404()
            return
        
        self.send_response(200)
        self.send_header("content-type", "text/html; charset=UTF-8")
        self.end_headers()

        text = page(self.path)
        self.wfile.write(text.encode('utf-8'))


    def do_POST(self):
        page = self.post_route()

        if not page:
            self.send_404()
            return

        body = self.rfile.read(int(self.headers.get('content-length')))
        text = page(parse_qs(str(body, 'utf-8')))
        
        self.send_response(200)
        self.send_header("content-type", "text/html; charset=UTF-8")
        self.end_headers()

        self.wfile.write(text.encode('utf-8'))


if __name__ == '__main__':
    server = HTTPServer(('', 4142), Handler)
    server.serve_forever()




